# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_data_model.ipynb.

# %% auto 0
__all__ = ['DataModel', 'Query']

# %% ../nbs/02_data_model.ipynb 2
from humble_database.database import Database
from humble_database.utils import delegates
from pydantic import BaseModel,ConfigDict,Field
from typing import Generic, List, TypeVar
from IPython.display import HTML
from json2html import json2html
import logging
import pandas as pd

# %% ../nbs/02_data_model.ipynb 4
DataModelT = TypeVar('DataModelT')

# %% ../nbs/02_data_model.ipynb 5
class DataModel(BaseModel,Generic[DataModelT]):
    """
    A Generic Data Model. The data attribute contains a list of objects of an arbitrary type. It is intended for use with a Pydantic model. 
    
    Supports rich __repr__ displays in HTML and Javascript for use in Jupyter Notebook and Lab, respectively. 
    """
    data: List[DataModelT]

    @delegates(BaseModel.model_dump)
    def to_dataframe(self,**kwargs):
        """turns `data` into a DataFrame. Delegates to `pydantic.BaseModel.model_dump` to control model serialization"""
        data = [x.model_dump(**kwargs) for x in self.data]
        return pd.DataFrame(data)

    @classmethod
    def display_html_schema(cls):
        return HTML(
            json2html.convert(
                cls.model_json_schema(
                    mode='serialization')
            )
        )
    
    def _repr_html_(self):
        try:
            df_html = self.to_dataframe().head()._repr_html_()
            schema = self.model_json_schema()
            html_fields = [
                f"<header><b>{schema_field}</b>: {schema.get(schema_field)}\n</header>"
                for schema_field in ['title','description']
            ]
            for field in self.model_fields.keys():
                if field!='data':
                    html_fields.append(
                        f'<header><b>{field}</b>: {getattr(self,field)}</header>'
                    )
            return ''.join(
                x for x in html_fields + ['<header><b>DataFrame</b>: </header>',df_html]
            )
        except Exception as e:
            logging.warning(e)
            pass
    
    def _repr_json_(self):
        try:
            return self.model_dump(mode='json')
        except Exception as e:
            logging.warning(e)
            pass

# %% ../nbs/02_data_model.ipynb 22
class Query(DataModel,Generic[DataModelT]):
    query: str
    data: List[DataModelT] = []

    def __call__(
        self,
        database: Database,
        query: str = None 
    ):
        # allows optional query overwrite 
        query_to_run = query or getattr(self,'query')
        data = database.query_to_records(query_to_run)
        return self.model_validate(dict(query=query_to_run,data=data))
