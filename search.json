[
  {
    "objectID": "utils.html",
    "href": "utils.html",
    "title": "utils",
    "section": "",
    "text": "A decorator that allows us to share parameters from one function to another\n\nThis function is adapted from this brilliant blog post by Jeremy Howard that outlines the advantages of delegation in Python. We will use this decorator to adapt several Pandas functions for our use cases.\n\nsource\n\n\n\n delegates (to=None, keep=False)\n\nDecorator: replace **kwargs in signature with params from to\n\n\n\n\nfrom nbdev.showdoc import show_doc\n\nExample: Create a fuction called break_the_ice that delegates to another function called say_hi:\ndef say_hi(name:str=None):\n    return f\"Hi! my name is {name}.\"\n    \n\n@delegates(say_hi)\ndef break_the_ice(fun_fact:str,**kwargs):\n    \n    hi = say_hi(name=kwargs['name'])\n    intro = hi + ' ' + fun_fact\n    return intro\n    \n\nshow_doc(break_the_ice)\n\n\n\n\n\n break_the_ice (fun_fact:str, name:str=None)\n\n\nbreak_the_ice(name='Charlie',fun_fact='I like music')\n\n'Hi! my name is Charlie. I like music'\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe function that you’re delegating to (i.e. the function within the call of the decorator) must have default values for the parameters that you want to pass to the decorated function\n\n\ndef first_function(\n    this_wont_show:str,\n    this_will_show:str=None\n):\n    pass \n\n@delegates(first_function)\ndef second_function(\n    another_param:str,\n    **kwargs\n):\n    pass\n\nshow_doc(second_function)\n\n\n\n\n\n second_function (another_param:str, this_will_show:str=None)"
  },
  {
    "objectID": "utils.html#delegation",
    "href": "utils.html#delegation",
    "title": "utils",
    "section": "",
    "text": "A decorator that allows us to share parameters from one function to another\n\nThis function is adapted from this brilliant blog post by Jeremy Howard that outlines the advantages of delegation in Python. We will use this decorator to adapt several Pandas functions for our use cases.\n\nsource\n\n\n\n delegates (to=None, keep=False)\n\nDecorator: replace **kwargs in signature with params from to\n\n\n\n\nfrom nbdev.showdoc import show_doc\n\nExample: Create a fuction called break_the_ice that delegates to another function called say_hi:\ndef say_hi(name:str=None):\n    return f\"Hi! my name is {name}.\"\n    \n\n@delegates(say_hi)\ndef break_the_ice(fun_fact:str,**kwargs):\n    \n    hi = say_hi(name=kwargs['name'])\n    intro = hi + ' ' + fun_fact\n    return intro\n    \n\nshow_doc(break_the_ice)\n\n\n\n\n\n break_the_ice (fun_fact:str, name:str=None)\n\n\nbreak_the_ice(name='Charlie',fun_fact='I like music')\n\n'Hi! my name is Charlie. I like music'\n\n\n\n\n\n\n\n\nWarning\n\n\n\nThe function that you’re delegating to (i.e. the function within the call of the decorator) must have default values for the parameters that you want to pass to the decorated function\n\n\ndef first_function(\n    this_wont_show:str,\n    this_will_show:str=None\n):\n    pass \n\n@delegates(first_function)\ndef second_function(\n    another_param:str,\n    **kwargs\n):\n    pass\n\nshow_doc(second_function)\n\n\n\n\n\n second_function (another_param:str, this_will_show:str=None)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "humble-database",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "humble-database",
    "section": "Install",
    "text": "Install\npip install humble_database"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "humble-database",
    "section": "How to use",
    "text": "How to use"
  },
  {
    "objectID": "index.html#database-example",
    "href": "index.html#database-example",
    "title": "humble-database",
    "section": "Database Example",
    "text": "Database Example\n\nimport pandas as pd\nimport os\nfrom sqlalchemy import text\nfrom urllib.request import urlretrieve\n\n\nurlretrieve(\n    \"http://2016.padjo.org/files/data/starterpack/census-acs-1year/acs-1-year-2015.sqlite\",\n    filename='acs.db'\n)\ndb = Database(drivername='sqlite',database = 'acs.db')\n\n\ndb.query_to_df(\"select * from sqlite_schema\").head(2)\n\n\n\n\n\n\n\n\ntype\nname\ntbl_name\nrootpage\nsql\n\n\n\n\n0\ntable\nstates\nstates\n2\nCREATE TABLE states (\\n year INTEGER , \\n ...\n\n\n1\ntable\ncongressional_districts\ncongressional_districts\n3\nCREATE TABLE congressional_districts (\\n ye...\n\n\n\n\n\n\n\n\ndb.query_to_df(\"\"\"select * from states limit 5\"\"\")\n\n\n\n\n\n\n\n\nyear\nname\ngeo_id\ntotal_population\nwhite\nblack\nhispanic\nasian\namerican_indian\npacific_islander\nother_race\nmedian_age\ntotal_households\nowner_occupied_homes_median_value\nper_capita_income\nmedian_household_income\nbelow_poverty_line\nforeign_born_population\nstate\n\n\n\n\n0\n2015\nAlabama\n04000US01\n4858979\n3204076\n1296681\n192870\n58918\n19069\n2566\n5590\n38.7\n1846390\n134100\n44765\n44765\n876016\n169972\n01\n\n\n1\n2015\nAlaska\n04000US02\n738432\n452472\n24739\n51825\n45753\n98300\n6341\n2201\n33.3\n250185\n259600\n73355\n73355\n74532\n58544\n02\n\n\n2\n2015\nArizona\n04000US04\n6828065\n3802263\n282718\n2098411\n210922\n276132\n9963\n6951\n37.4\n2463008\n194300\n51492\n51492\n1159043\n914400\n04\n\n\n3\n2015\nArkansas\n04000US05\n2978204\n2174934\n466486\n207743\n41932\n18221\n7551\n3826\n37.9\n1144663\n120700\n41995\n41995\n550508\n142841\n05\n\n\n4\n2015\nCalifornia\n04000US06\n39144818\n14815122\n2192844\n15184545\n5476958\n135866\n143408\n87813\n36.2\n12896357\n449100\n64500\n64500\n5891678\n10688336\n06\n\n\n\n\n\n\n\n\ndb.query_to_records(\n    \"select * from states limit 2\",\n)[0]\n\n{'year': 2015, 'name': 'Alabama', 'geo_id': '04000US01', 'total_population': 4858979, 'white': 3204076, 'black': 1296681, 'hispanic': 192870, 'asian': 58918, 'american_indian': 19069, 'pacific_islander': 2566, 'other_race': 5590, 'median_age': 38.7, 'total_households': 1846390, 'owner_occupied_homes_median_value': 134100, 'per_capita_income': 44765, 'median_household_income': 44765, 'below_poverty_line': 876016, 'foreign_born_population': 169972, 'state': '01'}"
  },
  {
    "objectID": "index.html#orm-example",
    "href": "index.html#orm-example",
    "title": "humble-database",
    "section": "ORM Example",
    "text": "ORM Example\n\nSQL Alchemy Models\n\nfrom pydantic import BaseModel,computed_field,field_validator,ConfigDict,Field\nfrom sqlalchemy import ForeignKey\nfrom sqlalchemy.orm import DeclarativeBase,Mapped, mapped_column,relationship\nfrom typing import List\n\n\nclass Base(DeclarativeBase):\n    year:  Mapped[int]\n    name: Mapped[str]\n    geo_id: Mapped[str]\n    total_population: Mapped[int]\n    white: Mapped[int]\n    black: Mapped[int]\n    hispanic: Mapped[int]\n    asian: Mapped[int]\n    american_indian: Mapped[int]\n    pacific_islander: Mapped[int]\n    other_race: Mapped[int]\n    median_age: Mapped[int]\n    total_households: Mapped[int]\n    owner_occupied_homes_median_value: Mapped[int]\n    per_capita_income: Mapped[int]\n    median_household_income: Mapped[int]\n    below_poverty_line: Mapped[int]\n    foreign_born_population: Mapped[int]\n\nclass State(Base):\n    __tablename__ = 'states'\n    state: Mapped[str] = mapped_column(primary_key=True)\n    total_population: Mapped[int]\n\n    places: Mapped[List['Place']] = relationship(back_populates='state_')\n    congressional_districts: Mapped[List['CongressionalDistrict']] = relationship(back_populates='state_')\n\nclass Place(Base):\n    __tablename__ = 'places'\n    place: Mapped[str] = mapped_column(primary_key=True)\n    total_population: Mapped[int]\n    state: Mapped[str] = mapped_column(ForeignKey(\"states.state\"))\n    \n    state_: Mapped['State'] = relationship(back_populates='places')\n\nclass CongressionalDistrict(Base):\n    __tablename__ = 'congressional_districts'\n    \n    congressional_district: Mapped[str] = mapped_column(primary_key=True)\n    state: Mapped[str] = mapped_column(ForeignKey(\"states.state\"))\n    \n    state_: Mapped['State'] = relationship(back_populates='congressional_districts')\n\n\nwith db.session_scope() as session:\n    s = session.query(State).first()\n    print(s,'\\n')\n    for place in s.places:\n        print(place.name,'::',place.median_household_income)\n\n&lt;__main__.State object&gt; \n\nBirmingham city, Alabama :: 32378\nDothan city, Alabama :: 44208\nHoover city, Alabama :: 77365\nHuntsville city, Alabama :: 46769\nMobile city, Alabama :: 38678\nMontgomery city, Alabama :: 41836\nTuscaloosa city, Alabama :: 44125\n\n\n\nwith db.session_scope() as session:\n    result = session.query(State).limit(7).all()\n    for state in result:\n        print(\n            state.name,\n            len(state.places),\n            len(state.congressional_districts)\n        )\n\nAlabama 7 7\nAlaska 1 1\nArizona 16 9\nArkansas 6 4\nCalifornia 137 53\nColorado 16 7\nConnecticut 8 5"
  },
  {
    "objectID": "index.html#pydantic-models",
    "href": "index.html#pydantic-models",
    "title": "humble-database",
    "section": "Pydantic Models",
    "text": "Pydantic Models\n\nclass ACSBase(BaseModel):\n    model_config = ConfigDict(from_attributes=True)\n    \n    year: int = Field()\n    name: str = Field()\n    geo_id: str = Field()\n    total_population: Optional[int] = Field(None)\n    white: Optional[int] = Field(None)\n    black: Optional[int] = Field(None)\n    hispanic: Optional[int] = Field(None)\n    asian: Optional[int] = Field(None)\n    american_indian: Optional[int] = Field(None)\n    pacific_islander: Optional[int] = Field(None)\n    other_race: Optional[int] = Field(None)\n    median_age: float = Field()\n    total_households: Optional[int] = Field(None)\n    owner_occupied_homes_median_value: int = Field()\n    per_capita_income: int = Field()\n    median_household_income: int = Field()\n    below_poverty_line: Optional[int] = Field(None)\n    foreign_born_population: Optional[int] = Field(None)    \n    state: int = Field()\n\nclass PlaceModel(ACSBase):\n    \"\"\"A Model for a record from the 'places' table\"\"\"\n    place: str\n\nclass CDModel(ACSBase):\n    \"\"\"A Model for a record from the 'congressional_districts' table\"\"\"\n    congressional_district: str \n\nclass StateModel(ACSBase):\n    \"\"\"A Model for a record from the 'states' table\"\"\"\n\n    places: List[PlaceModel]\n    congressional_districts: List[CDModel]\n    \n    @computed_field(return_type=float,title='People per District',)\n    def avg_people_per_cd(self) -&gt; float:\n        return sum([cd.total_population for cd in self.congressional_districts]) / len(self.congressional_districts)\n\n\nfrom IPython.display import JSON\n\n\n# mode = serialization includes computed fields\nJSON(StateModel.model_json_schema(mode='serialization'))\n\n&lt;IPython.core.display.JSON object&gt;\n\n\n\nfrom humble_database.data_model import DataModel\n\n\nACSDataModel = DataModel[StateModel]\nJSON(ACSDataModel.model_json_schema(mode='serialization'))\n\n&lt;IPython.core.display.JSON object&gt;\n\n\n\nwith db.session_scope() as session:\n    orm_result = session.query(State).all()\n    result = ACSDataModel(data=orm_result)\n\nresult\n\ntitle: DataModel[StateModel]\ndescription: None\nDataFrame: \n\n\n\n\n\n\nyear\nname\ngeo_id\ntotal_population\nwhite\nblack\nhispanic\nasian\namerican_indian\npacific_islander\n...\ntotal_households\nowner_occupied_homes_median_value\nper_capita_income\nmedian_household_income\nbelow_poverty_line\nforeign_born_population\nstate\nplaces\ncongressional_districts\navg_people_per_cd\n\n\n\n\n0\n2015\nAlabama\n04000US01\n4858979\n3204076\n1296681\n192870\n58918\n19069\n2566\n...\n1846390\n134100\n44765\n44765\n876016.0\n169972.0\n1\n[{'year': 2015, 'name': 'Birmingham city, Alab...\n[{'year': 2015, 'name': 'Congressional Distric...\n694139.857143\n\n\n1\n2015\nAlaska\n04000US02\n738432\n452472\n24739\n51825\n45753\n98300\n6341\n...\n250185\n259600\n73355\n73355\n74532.0\n58544.0\n2\n[{'year': 2015, 'name': 'Anchorage municipalit...\n[{'year': 2015, 'name': 'Congressional Distric...\n738432.000000\n\n\n2\n2015\nArizona\n04000US04\n6828065\n3802263\n282718\n2098411\n210922\n276132\n9963\n...\n2463008\n194300\n51492\n51492\n1159043.0\n914400.0\n4\n[{'year': 2015, 'name': 'Avondale city, Arizon...\n[{'year': 2015, 'name': 'Congressional Distric...\n711564.777778\n\n\n3\n2015\nArkansas\n04000US05\n2978204\n2174934\n466486\n207743\n41932\n18221\n7551\n...\n1144663\n120700\n41995\n41995\n550508.0\n142841.0\n5\n[{'year': 2015, 'name': 'Fayetteville city, Ar...\n[{'year': 2015, 'name': 'Congressional Distric...\n695398.750000\n\n\n4\n2015\nCalifornia\n04000US06\n39144818\n14815122\n2192844\n15184545\n5476958\n135866\n143408\n...\n12896357\n449100\n64500\n64500\n5891678.0\n10688336.0\n6\n[{'year': 2015, 'name': 'Alameda city, Califor...\n[{'year': 2015, 'name': 'Congressional Distric...\n735426.811321\n\n\n\n\n5 rows × 22 columns"
  },
  {
    "objectID": "database.html",
    "href": "database.html",
    "title": "database",
    "section": "",
    "text": "To create our Database connections, we will use SQL Alchemy’s URL object\n\nThe following is from the SQL Alchemy fucntional documentation:\n\n\n\n\n URL.create (drivername:str, username:Optional[str]=None,\n             password:Optional[str]=None, host:Optional[str]=None,\n             port:Optional[int]=None, database:Optional[str]=None, query:M\n             apping[str,Union[Sequence[str],str]]=immutabledict({}))\n\nCreate a new :class:_engine.URL object.\n.. seealso::\n:ref:`database_urls`\n:param drivername: the name of the database backend. This name will correspond to a module in sqlalchemy/databases or a third party plug-in. :param username: The user name. :param password: database password. Is typically a string, but may also be an object that can be stringified with str().\n.. note:: A password-producing object will be stringified only once per :class:_engine.Engine object. For dynamic password generation per connect, see :ref:engines_dynamic_tokens.\n:param host: The name of the host. :param port: The port number. :param database: The database name. :param query: A dictionary of string keys to string values to be passed to the dialect and/or the DBAPI upon connect. To specify non-string parameters to a Python DBAPI directly, use the :paramref:_sa.create_engine.connect_args parameter to :func:_sa.create_engine. See also :attr:_engine.URL.normalized_query for a dictionary that is consistently string-&gt;list of string. :return: new :class:_engine.URL object.\n.. versionadded:: 1.4\nThe :class:`_engine.URL` object is now an **immutable named\ntuple**.  In addition, the ``query`` dictionary is also immutable.\nTo create a URL, use the :func:`_engine.url.make_url` or\n:meth:`_engine.URL.create` function/ method.  To modify a\n:class:`_engine.URL`, use the :meth:`_engine.URL.set` and\n:meth:`_engine.URL.update_query` methods."
  },
  {
    "objectID": "database.html#sql-alchemy-connection",
    "href": "database.html#sql-alchemy-connection",
    "title": "database",
    "section": "",
    "text": "To create our Database connections, we will use SQL Alchemy’s URL object\n\nThe following is from the SQL Alchemy fucntional documentation:\n\n\n\n\n URL.create (drivername:str, username:Optional[str]=None,\n             password:Optional[str]=None, host:Optional[str]=None,\n             port:Optional[int]=None, database:Optional[str]=None, query:M\n             apping[str,Union[Sequence[str],str]]=immutabledict({}))\n\nCreate a new :class:_engine.URL object.\n.. seealso::\n:ref:`database_urls`\n:param drivername: the name of the database backend. This name will correspond to a module in sqlalchemy/databases or a third party plug-in. :param username: The user name. :param password: database password. Is typically a string, but may also be an object that can be stringified with str().\n.. note:: A password-producing object will be stringified only once per :class:_engine.Engine object. For dynamic password generation per connect, see :ref:engines_dynamic_tokens.\n:param host: The name of the host. :param port: The port number. :param database: The database name. :param query: A dictionary of string keys to string values to be passed to the dialect and/or the DBAPI upon connect. To specify non-string parameters to a Python DBAPI directly, use the :paramref:_sa.create_engine.connect_args parameter to :func:_sa.create_engine. See also :attr:_engine.URL.normalized_query for a dictionary that is consistently string-&gt;list of string. :return: new :class:_engine.URL object.\n.. versionadded:: 1.4\nThe :class:`_engine.URL` object is now an **immutable named\ntuple**.  In addition, the ``query`` dictionary is also immutable.\nTo create a URL, use the :func:`_engine.url.make_url` or\n:meth:`_engine.URL.create` function/ method.  To modify a\n:class:`_engine.URL`, use the :meth:`_engine.URL.set` and\n:meth:`_engine.URL.update_query` methods."
  },
  {
    "objectID": "database.html#database-settings",
    "href": "database.html#database-settings",
    "title": "database",
    "section": "Database Settings",
    "text": "Database Settings\n\nA Pydantic model that controls argumetns passed to the SQL alchemy URL constructor\n\n\nsource\n\nDatabaseSettings\n\n DatabaseSettings (_case_sensitive:bool|None=None,\n                   _env_prefix:str|None=None,\n                   _env_file:DotenvType|None=Path('.'),\n                   _env_file_encoding:str|None=None,\n                   _env_nested_delimiter:str|None=None,\n                   _secrets_dir:str|Path|None=None, drivername:str,\n                   username:Optional[str]=None,\n                   password:Optional[pydantic.types.SecretStr]=None,\n                   host:Optional[str]=None, port:Optional[int]=None,\n                   database:Optional[str]=None, query:dict[str,str]={})\n\nBase class for settings, allowing values to be overridden by environment variables.\nThis is useful in production for secrets you do not wish to save in code, it plays nicely with docker(-compose), Heroku and any 12 factor app design.\nAll the below attributes can be set via model_config.\nArgs: _case_sensitive: Whether environment variables names should be read with case-sensitivity. Defaults to None. _env_prefix: Prefix for all environment variables. Defaults to None. _env_file: The env file(s) to load settings values from. Defaults to Path(''), which means that the value from model_config['env_file'] should be used. You can also pass None to indicate that environment variables should not be loaded from an env file. _env_file_encoding: The env file encoding, e.g. 'latin-1'. Defaults to None. _env_nested_delimiter: The nested env values delimiter. Defaults to None. _secrets_dir: The secret files directory. Defaults to None.\n\nsettings = DatabaseSettings(\n    drivername='sqlite',\n    database='test.db',\n)\nsettings\n\nDatabaseSettings(drivername='sqlite', username=None, password=None, host=None, port=None, database='test.db', query={})\n\n\n\nurl = URL.create(\n    **settings.model_dump()\n)\nengine = create_engine(url)\nengine\n\nEngine(sqlite:///test.db)\n\n\n\nWhy use Pydantic for Database Settings?\n\nPydantic’s BaseSettings object comes with support for environment variables and secret strings\n\n\n# set some environment variables\nos.environ['username']='humble_chuck'\nos.environ['password']='super secret passkey'\n\n# pydantic automatically reads them\nsettings = DatabaseSettings(drivername='mysql')\nassert settings.username == 'humble_chuck'\n\n# pydantic also keeps your password safe from displays\nprint(f\"password prints as a secret: {settings.password}\")\n\n# by default, __init__ values take precedence over environment variables\nalternate_settings = DatabaseSettings(drivername='mysql',username='some_other_person')\nassert alternate_settings.username == 'some_other_person'\n\nfor k in ('username','password'):\n    os.environ.pop(k)\n\npassword prints as a secret: **********\n\n\n\nsource\n\n\n\nAbstractDatabaseClass\n\n AbstractDatabaseClass ()\n\nAbstract Base Class used to define methods for all Database Connections.\nA seperate Base Class is required because Snowflake Database Settings will behave differently, and thus they will need their own Database Settings class.\n\nsource\n\n\nDatabase\n\n Database (drivername:str, username:Optional[str]=None,\n           password:Optional[pydantic.types.SecretStr]=None,\n           host:Optional[str]=None, port:Optional[int]=None,\n           database:Optional[str]=None, query:dict[str,str]={})\n\nCreate a Database connection with default functionality.\nInherits attributes from DatabaseSettings to manage credentials. Inherits methods from AbstractDatabaseClass.\nUse the class as-is to quickly create a database connection, or create a subclass to control connections to a specific database.\nMore on SQL Alchemy engines from SQLAlchemy docs:\n\nThe Engine is the starting point for any SQLAlchemy application. It’s “home base” for the actual database and its DBAPI.\n\nAn Engine references both a Dialect and a Pool, which together interpret the DBAPI’s module functions as well as the behavior of the database\nPool object which will establish a DBAPI connection at localhost:5432 when a connection request is first received\n– Note that the Engine and its underlying Pool do not establish the first actual DBAPI connection until the Engine.connect() method is called, or an operation which is dependent on this method such as Engine.execute() is invoked.\nIn this way, Engine and Pool can be said to have a lazy initialization behavior.\n\nThe Engine, once created, can either be used directly to interact with the database, or can be passed to a Session object to work with the ORM."
  },
  {
    "objectID": "database.html#examples",
    "href": "database.html#examples",
    "title": "database",
    "section": "Examples:",
    "text": "Examples:\nTo use the Database as-is, pass the desired variables to the constructor:\n\ndb = Database(drivername='sqlite',database='test.db')\nprint(db)\n\nusers = pd.DataFrame({\n    'id':[1,2,3],\n    'user':['larry','moe','curly']\n})\n\nwith db.engine_scope() as conn:\n    users.to_sql('users',conn,if_exists='replace',index=False)\n\nqueried = db.query_to_df(\"select * from users\")\n\nassert queried.equals(users)\nos.remove('test.db')\n\ndrivername='sqlite' username=None password=None host=None port=None database='test.db' query={}\n\n\n\nCreate a sub-class to handle connections to a specific database\n\nclass RNACentralDatabase(Database):\n    model_config = SettingsConfigDict(env_prefix='rna_db_')\n    \n    drivername='postgresql'\n    database='pfmegrnargs'\n    host='hh-pgsql-public.ebi.ac.uk'\n    port=5432\n    \n\nos.environ['rna_db_username']='reader'\nos.environ['rna_db_password']='NWDMCE5xdipIjRrp'\n\nrna_db = RNACentralDatabase()\nrna_db\n\n\nrna_db.query_to_df(\"\"\"select * from rnc_database limit 5\"\"\")\n\n\n\n\n\n\n\n\nid\ntimestamp\nuserstamp\ndescr\ncurrent_release\nfull_descr\nalive\nfor_release\ndisplay_name\nproject_id\navg_length\nmin_length\nmax_length\nnum_sequences\nnum_organisms\n\n\n\n\n0\n5\n2017-05-17\nRNACEN\nVEGA\n98\nVEGA\nN\nNone\nVEGA\nPRJEB4568\nNaN\nNaN\nNaN\n0\n0\n\n\n1\n1\n2017-05-01\nRNACEN\nENA\n731\nENA\nY\nNone\nENA\nNone\n412.0\n10.0\n900074.0\n12086180\n814855\n\n\n2\n26\n2017-05-01\nRNACEN\nGENCODE\n450\nGENCODE\nN\nNone\nGENCODE\nNone\n889.0\n32.0\n205012.0\n47677\n2\n\n\n3\n3\n2017-05-01\nRNACEN\nSRPDB\n732\nSRPDB\nY\nNone\nSRPDB\nPRJEB4384\n173.0\n30.0\n533.0\n503\n684\n\n\n4\n15\n2017-05-02\nRNACEN\nWORMBASE\n735\nWormBase\nY\nNone\nWormBase\nPRJNA13758\n174.0\n17.0\n84141.0\n26116\n1\n\n\n\n\n\n\n\n\nrna_db.query_to_records(\"select id,timestamp from rnc_database limit 1\")[0]\n\n{'id': 5, 'timestamp': datetime.datetime(2017, 5, 17, 0, 0)}\n\n\n\nwith rna_db.engine_scope() as conn: \n    result = conn.execute(text(\"\"\"select * from rnc_database limit 5\"\"\"))\n    print(result.fetchall()[0])\n\n(5, datetime.datetime(2017, 5, 17, 0, 0), 'RNACEN', 'VEGA', 98, 'VEGA', 'N', None, 'VEGA', 'PRJEB4568', None, None, None, 0, 0)"
  },
  {
    "objectID": "data_model.html",
    "href": "data_model.html",
    "title": "data_model",
    "section": "",
    "text": "Intended for modeling data stored in a table or DataFrame\n\n\nsource\n\n\n\n DataModel (data:List[~DataModelT])\n\nA Generic Data Model. The data attribute contains a list of objects of an arbitrary type. It is intended for use with a Pydantic model.\nSupports rich repr displays in HTML and Javascript for use in Jupyter Notebook and Lab, respectively.\n\n\n\n\nType\nDetails\n\n\n\n\ndata\nAny\n\n\n\nReturns\nNone\ntype: ignore"
  },
  {
    "objectID": "data_model.html#generic-data-model",
    "href": "data_model.html#generic-data-model",
    "title": "data_model",
    "section": "",
    "text": "Intended for modeling data stored in a table or DataFrame\n\n\nsource\n\n\n\n DataModel (data:List[~DataModelT])\n\nA Generic Data Model. The data attribute contains a list of objects of an arbitrary type. It is intended for use with a Pydantic model.\nSupports rich repr displays in HTML and Javascript for use in Jupyter Notebook and Lab, respectively.\n\n\n\n\nType\nDetails\n\n\n\n\ndata\nAny\n\n\n\nReturns\nNone\ntype: ignore"
  },
  {
    "objectID": "data_model.html#example-air-quality-index",
    "href": "data_model.html#example-air-quality-index",
    "title": "data_model",
    "section": "Example: Air Quality Index",
    "text": "Example: Air Quality Index\n\nimport datetime as dt\nfrom pydantic import Field,ConfigDict,BeforeValidator\nfrom typing import Annotated,Optional\n\n\nurl = \"https://data.cityofnewyork.us/api/views/c3uy-2p5r/rows.csv?accessType=DOWNLOAD\"\nair_quality_df = pd.read_csv(url)\nair_quality_df.head()\n\n\n\n\n\n\n\n\nUnique ID\nIndicator ID\nName\nMeasure\nMeasure Info\nGeo Type Name\nGeo Join ID\nGeo Place Name\nTime Period\nStart_Date\nData Value\nMessage\n\n\n\n\n0\n216498\n386\nOzone (O3)\nMean\nppb\nCD\n313\nConey Island (CD13)\nSummer 2013\n06/01/2013\n34.64\nNaN\n\n\n1\n216499\n386\nOzone (O3)\nMean\nppb\nCD\n313\nConey Island (CD13)\nSummer 2014\n06/01/2014\n33.22\nNaN\n\n\n2\n219969\n386\nOzone (O3)\nMean\nppb\nBorough\n1\nBronx\nSummer 2013\n06/01/2013\n31.25\nNaN\n\n\n3\n219970\n386\nOzone (O3)\nMean\nppb\nBorough\n1\nBronx\nSummer 2014\n06/01/2014\n31.15\nNaN\n\n\n4\n164876\n383\nSulfur Dioxide (SO2)\nMean\nppb\nCD\n211\nMorris Park and Bronxdale (CD11)\nWinter 2008-09\n12/01/2008\n5.89\nNaN\n\n\n\n\n\n\n\n\nclass AirQuality(BaseModel):\n    \"\"\"An air quality measurement from the City of New York\"\"\"\n    model_config = ConfigDict(\n        coerce_numbers_to_str=True,\n        alias_generator = lambda x: x.replace('_',' ').title(),\n        \n    )\n    \n    unique_id: str = Field(alias='Unique ID')\n    indicator_id: str = Field(alias='Indicator ID')\n    name: str\n    measure: str\n    measure_info: str\n    geo_type_name: str\n    geo_join_id: str = Field(alias='Geo Join ID')\n    geo_place_name: str    \n    time_period: str\n    start_date: Annotated[\n        dt.date,\n        BeforeValidator(lambda x: dt.datetime.strptime(x,\"%m/%d/%Y\"))\n    ] = Field(alias='Start_Date')\n    data_value: float\n\n\nAirQuality.model_validate(\n    air_quality_df.to_dict('records')[0]\n)\n\nAirQuality(unique_id='216498', indicator_id='386', name='Ozone (O3)', measure='Mean', measure_info='ppb', geo_type_name='CD', geo_join_id='313', geo_place_name='Coney Island (CD13)', time_period='Summer 2013', start_date=datetime.date(2013, 6, 1), data_value=34.64)\n\n\nWith a defined Base Model for our data, we can very quickly generate a rich schema:\n\n# create a new DataModel object by specifying the datatype\naq_data_model = DataModel[AirQuality]\n\nDataModel[AirQuality].display_html_schema()\n\n\n\n\n\n\n\n\n$defs\n\n\n\n\n\n\n\nAirQuality\n\n\n\n\n\n\n\ndescription\nAn air quality measurement from the City of New York\n\n\nproperties\n\n\n\n\n\n\n\nUnique ID\n\n\n\ntitle\nUnique Id\n\n\ntype\nstring\n\n\n\n\n\nIndicator ID\n\n\n\ntitle\nIndicator Id\n\n\ntype\nstring\n\n\n\n\n\nName\n\n\n\ntitle\nName\n\n\ntype\nstring\n\n\n\n\n\nMeasure\n\n\n\ntitle\nMeasure\n\n\ntype\nstring\n\n\n\n\n\nMeasure Info\n\n\n\ntitle\nMeasure Info\n\n\ntype\nstring\n\n\n\n\n\nGeo Type Name\n\n\n\ntitle\nGeo Type Name\n\n\ntype\nstring\n\n\n\n\n\nGeo Join ID\n\n\n\ntitle\nGeo Join Id\n\n\ntype\nstring\n\n\n\n\n\nGeo Place Name\n\n\n\ntitle\nGeo Place Name\n\n\ntype\nstring\n\n\n\n\n\nTime Period\n\n\n\ntitle\nTime Period\n\n\ntype\nstring\n\n\n\n\n\nStart_Date\n\n\n\nformat\ndate\n\n\ntitle\nStart Date\n\n\ntype\nstring\n\n\n\n\n\nData Value\n\n\n\ntitle\nData Value\n\n\ntype\nnumber\n\n\n\n\n\n\n\n\nrequired\n\nUnique ID\nIndicator ID\nName\nMeasure\nMeasure Info\nGeo Type Name\nGeo Join ID\nGeo Place Name\nTime Period\nStart_Date\nData Value\n\n\n\ntitle\nAirQuality\n\n\ntype\nobject\n\n\n\n\n\n\n\n\nproperties\n\n\n\n\n\n\n\ndata\n\n\n\n\n\n\n\nitems\n\n\n\n$ref\n#/$defs/AirQuality\n\n\n\n\n\ntitle\nData\n\n\ntype\narray\n\n\n\n\n\n\n\n\nrequired\n\ndata\n\n\n\ntitle\nDataModel[AirQuality]\n\n\ntype\nobject\n\n\n\n\n\nWe can use the resulting data model to validate incoming data.\n\naq_data_model(data=air_quality_df.to_dict('records'))\n\ntitle: DataModel[AirQuality]\ndescription: None\nDataFrame: \n\n\n\n\n\n\nunique_id\nindicator_id\nname\nmeasure\nmeasure_info\ngeo_type_name\ngeo_join_id\ngeo_place_name\ntime_period\nstart_date\ndata_value\n\n\n\n\n0\n216498\n386\nOzone (O3)\nMean\nppb\nCD\n313\nConey Island (CD13)\nSummer 2013\n2013-06-01\n34.64\n\n\n1\n216499\n386\nOzone (O3)\nMean\nppb\nCD\n313\nConey Island (CD13)\nSummer 2014\n2014-06-01\n33.22\n\n\n2\n219969\n386\nOzone (O3)\nMean\nppb\nBorough\n1\nBronx\nSummer 2013\n2013-06-01\n31.25\n\n\n3\n219970\n386\nOzone (O3)\nMean\nppb\nBorough\n1\nBronx\nSummer 2014\n2014-06-01\n31.15\n\n\n4\n164876\n383\nSulfur Dioxide (SO2)\nMean\nppb\nCD\n211\nMorris Park and Bronxdale (CD11)\nWinter 2008-09\n2008-12-01\n5.89\n\n\n\n\n\n\n\nAnd we can subclass and informed generic model to add attributes to the dataset.\n\nclass AirQualityData(DataModel[AirQuality]):\n    \"\"\"Air quality measurements from the City of New York.\"\"\"\n    source: str = \"https://data.cityofnewyork.us/api/views/c3uy-2p5r/rows.csv?accessType=DOWNLOAD\"\n    accessed_at: dt.datetime = Field(default_factory=dt.datetime.now)\n\n\naq = AirQualityData(data=air_quality_df.to_dict('records'))\naq\n\ntitle: AirQualityData\ndescription: Air quality measurements from the City of New York.\nsource: https://data.cityofnewyork.us/api/views/c3uy-2p5r/rows.csv?accessType=DOWNLOADaccessed_at: 2023-10-02 18:21:29.596942DataFrame: \n\n\n\n\n\n\nunique_id\nindicator_id\nname\nmeasure\nmeasure_info\ngeo_type_name\ngeo_join_id\ngeo_place_name\ntime_period\nstart_date\ndata_value\n\n\n\n\n0\n216498\n386\nOzone (O3)\nMean\nppb\nCD\n313\nConey Island (CD13)\nSummer 2013\n2013-06-01\n34.64\n\n\n1\n216499\n386\nOzone (O3)\nMean\nppb\nCD\n313\nConey Island (CD13)\nSummer 2014\n2014-06-01\n33.22\n\n\n2\n219969\n386\nOzone (O3)\nMean\nppb\nBorough\n1\nBronx\nSummer 2013\n2013-06-01\n31.25\n\n\n3\n219970\n386\nOzone (O3)\nMean\nppb\nBorough\n1\nBronx\nSummer 2014\n2014-06-01\n31.15\n\n\n4\n164876\n383\nSulfur Dioxide (SO2)\nMean\nppb\nCD\n211\nMorris Park and Bronxdale (CD11)\nWinter 2008-09\n2008-12-01\n5.89\n\n\n\n\n\n\n\nthe to_dataframe method takes optional arguments to control how the validated data is expressed. Arguments to this method are delegated from Pyandtic’s BaseModel.model_dump()\n\naq.to_dataframe().head()\n\n\n\n\n\n\n\n\nunique_id\nindicator_id\nname\nmeasure\nmeasure_info\ngeo_type_name\ngeo_join_id\ngeo_place_name\ntime_period\nstart_date\ndata_value\n\n\n\n\n0\n216498\n386\nOzone (O3)\nMean\nppb\nCD\n313\nConey Island (CD13)\nSummer 2013\n2013-06-01\n34.64\n\n\n1\n216499\n386\nOzone (O3)\nMean\nppb\nCD\n313\nConey Island (CD13)\nSummer 2014\n2014-06-01\n33.22\n\n\n2\n219969\n386\nOzone (O3)\nMean\nppb\nBorough\n1\nBronx\nSummer 2013\n2013-06-01\n31.25\n\n\n3\n219970\n386\nOzone (O3)\nMean\nppb\nBorough\n1\nBronx\nSummer 2014\n2014-06-01\n31.15\n\n\n4\n164876\n383\nSulfur Dioxide (SO2)\nMean\nppb\nCD\n211\nMorris Park and Bronxdale (CD11)\nWinter 2008-09\n2008-12-01\n5.89\n\n\n\n\n\n\n\n\naq.to_dataframe(\n    by_alias=True,\n    exclude={'geo_join_id','unique_id','indicator_id'}\n).head()\n\n\n\n\n\n\n\n\nName\nMeasure\nMeasure Info\nGeo Type Name\nGeo Place Name\nTime Period\nStart_Date\nData Value\n\n\n\n\n0\nOzone (O3)\nMean\nppb\nCD\nConey Island (CD13)\nSummer 2013\n2013-06-01\n34.64\n\n\n1\nOzone (O3)\nMean\nppb\nCD\nConey Island (CD13)\nSummer 2014\n2014-06-01\n33.22\n\n\n2\nOzone (O3)\nMean\nppb\nBorough\nBronx\nSummer 2013\n2013-06-01\n31.25\n\n\n3\nOzone (O3)\nMean\nppb\nBorough\nBronx\nSummer 2014\n2014-06-01\n31.15\n\n\n4\nSulfur Dioxide (SO2)\nMean\nppb\nCD\nMorris Park and Bronxdale (CD11)\nWinter 2008-09\n2008-12-01\n5.89"
  },
  {
    "objectID": "data_model.html#generic-query-model",
    "href": "data_model.html#generic-query-model",
    "title": "data_model",
    "section": "Generic Query Model",
    "text": "Generic Query Model\n\nsource\n\nQuery\n\n Query (data:List[~DataModelT]=[], query:str)\n\nA Generic Data Model. The data attribute contains a list of objects of an arbitrary type. It is intended for use with a Pydantic model.\nSupports rich repr displays in HTML and Javascript for use in Jupyter Notebook and Lab, respectively.\n\n\n\n\nType\nDetails\n\n\n\n\ndata\nAny\n\n\n\nReturns\nNone\ntype: ignore\n\n\n\n\nclass State(BaseModel):\n    \"\"\"Name, ID and Total Population for a State\"\"\"\n    model_config = ConfigDict(\n        alias_generator=lambda x: x.replace('_',' ').title(),\n        populate_by_name=True\n    )\n    \n    name: str = Field(description='The Name of the State')\n    state: str = Field(description='The ID of the State')\n    total_population: int = Field(description='Total Population of the State')\n\n\ndb = Database(\n    drivername='sqlite',\n    database='acs.db'\n)\nfirst_row = db.query_to_records(\n    \"select * from states limit 2\"\n)[0]\nState.model_validate(first_row)\n\nState(name='Alabama', state='01', total_population=4858979)\n\n\n\npreview_states = Query[State](\n    query='select * from states limit 10'\n)\npreview_states\n\ntitle: Query[State]\ndescription: None\nquery: select * from states limit 10DataFrame: \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nresult = preview_states(db)\nresult\n\ntitle: Query[State]\ndescription: None\nquery: select * from states limit 10DataFrame: \n\n\n\n\n\n\nname\nstate\ntotal_population\n\n\n\n\n0\nAlabama\n01\n4858979\n\n\n1\nAlaska\n02\n738432\n\n\n2\nArizona\n04\n6828065\n\n\n3\nArkansas\n05\n2978204\n\n\n4\nCalifornia\n06\n39144818\n\n\n\n\n\n\n\n\nresult.to_dataframe(\n    include={'name','total_population'},\n    by_alias=True,\n    \n)\n\n\n\n\n\n\n\n\nName\nTotal Population\n\n\n\n\n0\nAlabama\n4858979\n\n\n1\nAlaska\n738432\n\n\n2\nArizona\n6828065\n\n\n3\nArkansas\n2978204\n\n\n4\nCalifornia\n39144818\n\n\n5\nColorado\n5456574\n\n\n6\nConnecticut\n3590886\n\n\n7\nDelaware\n945934\n\n\n8\nDistrict of Columbia\n672228\n\n\n9\nFlorida\n20271272\n\n\n\n\n\n\n\n\nQuery(query='select * from states limit 5')(db).data[0]\n\n{'year': 2015, 'name': 'Alabama', 'geo_id': '04000US01', 'total_population': 4858979, 'white': 3204076, 'black': 1296681, 'hispanic': 192870, 'asian': 58918, 'american_indian': 19069, 'pacific_islander': 2566, 'other_race': 5590, 'median_age': 38.7, 'total_households': 1846390, 'owner_occupied_homes_median_value': 134100, 'per_capita_income': 44765, 'median_household_income': 44765, 'below_poverty_line': 876016, 'foreign_born_population': 169972, 'state': '01'}\n\n\n\nimport datetime as dt\nfrom IPython.display import JSON\n\n\nclass QueryStates(Query[State]):\n    \"\"\"Query States\"\"\"\n    \n    query: str = \"select * from states\"\n    executed_at: dt.datetime = Field(default_factory=dt.datetime.now)\n\n\nJSON(QueryStates.model_json_schema())\n\n&lt;IPython.core.display.JSON object&gt;\n\n\n\nQueryStates()(db)\n\ntitle: QueryStates\ndescription: Query States\nquery: select * from statesexecuted_at: 2023-10-02 18:13:58.415909DataFrame: \n\n\n\n\n\n\nname\nstate\ntotal_population\n\n\n\n\n0\nAlabama\n01\n4858979\n\n\n1\nAlaska\n02\n738432\n\n\n2\nArizona\n04\n6828065\n\n\n3\nArkansas\n05\n2978204\n\n\n4\nCalifornia\n06\n39144818\n\n\n\n\n\n\n\n\nTo Do: Allow for Query Descriptors\n\nclass ACSDatabase(Database):\n    drivername='sqlite'\n    database = 'acs.db'\n    \n    #get_states = Query[State](query='select * from states')    \n\n\n# acs = ACSDatabase()\n# acs.get_states()\n\n\n!nbdev_export"
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "from humble_database.database import Database\nfrom humble_database.data_model import DataModel,Query\n\n\nsource\n\nDatabase\n\n Database (drivername:str, username:Optional[str]=None,\n           password:Optional[pydantic.types.SecretStr]=None,\n           host:Optional[str]=None, port:Optional[int]=None,\n           database:Optional[str]=None, query:dict[str,str]={})\n\nCreate a Database connection with default functionality.\nInherits attributes from DatabaseSettings to manage credentials. Inherits methods from AbstractDatabaseClass.\nUse the class as-is to quickly create a database connection, or create a subclass to control connections to a specific database.\nMore on SQL Alchemy engines from SQLAlchemy docs:\n\nThe Engine is the starting point for any SQLAlchemy application. It’s “home base” for the actual database and its DBAPI.\n\nAn Engine references both a Dialect and a Pool, which together interpret the DBAPI’s module functions as well as the behavior of the database\nPool object which will establish a DBAPI connection at localhost:5432 when a connection request is first received\n– Note that the Engine and its underlying Pool do not establish the first actual DBAPI connection until the Engine.connect() method is called, or an operation which is dependent on this method such as Engine.execute() is invoked.\nIn this way, Engine and Pool can be said to have a lazy initialization behavior.\n\nThe Engine, once created, can either be used directly to interact with the database, or can be passed to a Session object to work with the ORM.\n\n\nsource\n\n\nDataModel\n\n DataModel (data:List[~DataModelT])\n\nA Generic Data Model. The data attribute contains a list of objects of an arbitrary type. It is intended for use with a Pydantic model.\nSupports rich repr displays in HTML and Javascript for use in Jupyter Notebook and Lab, respectively.\n\n\n\n\nType\nDetails\n\n\n\n\ndata\nAny\n\n\n\nReturns\nNone\ntype: ignore\n\n\n\n\nsource\n\n\nQuery\n\n Query (data:List[~DataModelT]=[], query:str)\n\nA Generic Data Model. The data attribute contains a list of objects of an arbitrary type. It is intended for use with a Pydantic model.\nSupports rich repr displays in HTML and Javascript for use in Jupyter Notebook and Lab, respectively.\n\n\n\n\nType\nDetails\n\n\n\n\ndata\nAny\n\n\n\nReturns\nNone\ntype: ignore"
  }
]